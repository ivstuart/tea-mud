=== EBOOK - How to build your own Mud ===

== Table Of Contents

 1. Introduction
   i. What is a mud
  ii. History of muds
 2. Main object relationships
 3. Client server communication
 4. MudIO the persistence layer
 5. SomeMoney explained
 6. FightActions explained
 7. Spells and Buffs
 8. Mob Behaviour
 9. World building
10. Conclusion

== Introduction
= What is a mud

A mud or multi-user dungeon is a game in which the player takes on an avatar or character in order to play the game.
This alter ego is very much like playing a character in an RPG (Role Playing Game). In the game world players have hp or
health points to record damage against them that they receive from monsters or mobs (mobile objects) or other players.
When hp is less than zero you are killed and respawn back to the starting portal.

When you are killed your equipment and items drop onto your corpse which fell where you were killed. You then have the
task to walk back to the location to retrieve your equipment. However other players may get there first and steal your
belongings. This is allowed on a player killing mud. Or PVP mud (player verses player).

In order to move from room to room you have mv points or movement points. Depending on the terrain room type and
movement method will determine the total cost of the movement out of a room to another one. Being a fantasy game players
also have mana or mn points to cast spells with.

Hp, Mv, Mn all regenerate over time. The speed depends on what state your character is in. i.e. They will recover more
quickly if the character is sleeping. However being asleep makes you very vulnerable to attack. The game has a passage
of time every 100 milliseconds to resolve combat turns and every 15 seconds players regain a percentage of these stats.

A player advances through the game by killing mobs. Mobs on death provide xp points and a chance to find new equipment
via equipment drops. Eq or equipment when rare or powerful is known as leet equipment. One goal of the game is to
collect as much leet eq as the character can equip. Another is to reach the maximum level for the game typically level
90. Another is to collect gold and become wealth. Another is to kill as many opposite alignment players as you can and
be rating top player killer in war points. At the end of the day its all about having fun and making new friends that
are met online. In order to most efficiently xp or hunt down other players players need to get into a group and work
together. The game can be played solo but most fun is to be had from working together in teams of players.

At level 60 it is possible to remort, to increase racial stats such that strength, constitution, intelligence, dexterity
, wisdom are increased by up to 6 points. This is done at the cost of returning the character to level 1 to start over
the game but with a more powerful character. This can be done 6 times and provides the players with the repeat play
experience of returning to zones for lower level characters.

Players can group up to share xp for killing mobs or war points for killing players. However the xp is split by level
of each player to keep it fair as the higher level players are likely to be dealing out the majority of the damage.
Players can use war points to tier at there war master to receive special leet equipment.

= History of muds

https://en.wikipedia.org/wiki/MUD

= Origins

Colossal Cave Adventure, created in 1975 by Will Crowther on a DEC PDP-10 computer, was the first widely used adventure
game. The game was significantly expanded in 1976 by Don Woods. Also called Adventure, it contained many D&D features
and references, including a computer controlled dungeon master.

Numerous graphical MUDs were created on the PLATO system at the University of Illinois and other American universities
that used PLATO, beginning in 1975. Among them were "pedit5," "oubliette," "moria," "avathar," "krozair," "dungeon,"
"dnd," "crypt," and "drygulch." By 1978-79, PLATO MUDs were heavily in use on various PLATO systems, and exhibited a
marked increase in sophistication in terms of 3D graphics, storytelling, user involvement, team play, and depth of
objects and monsters in the dungeons. PLATO MUDs are often ignored by historians and by the creators of other MUDs
whose work came later.

Inspired by Adventure, a group of students at MIT in the summer of 1977 wrote a game for the PDP-10 minicomputer; called
Zork, it became quite popular on the ARPANET. Zork was ported, under the filename DUNGEN ("dungeon"), to FORTRAN by a
programmer working at DEC in 1978.

In 1978 Roy Trubshaw, a student at Essex University in the UK, started working on a multi-user adventure game in the
MACRO-10 assembly language for a DEC PDP-10. He named the game MUD (Multi-User Dungeon), in tribute to the Dungeon
variant of Zork, which Trubshaw had greatly enjoyed playing. Trubshaw converted MUD to BCPL (the predecessor of C),
before handing over development to Richard Bartle, a fellow student at Essex University, in 1980. The game revolved
around gaining points till one achieved the Wizard rank, giving the character immortality and special powers over
mortals.

= Wider access and early derivatives

MUD, better known as Essex MUD and MUD1 in later years, ran on the Essex University network, and became more widely
accessible when a guest account was set up that allowed users on JANET (a British academic X.25 computer network) to
connect on weekends and between the hours of 2 AM and 8 AM on weekdays.[22] It became the first Internet multiplayer
online role-playing game in 1980, when Essex University connected its internal network to ARPANet.

The original MUD game was closed down in late 1987,[24] reportedly under pressure from CompuServe, to whom
Richard Bartle had licensed the game. This left MIST, a derivative of MUD1 with similar gameplay, as the only
remaining MUD running on the Essex University network, becoming one of the first of its kind to attain broad popularity.
 MIST ran until the machine that hosted it, a PDP-10, was superseded in early 1991.

1985 saw the origin of a number of projects inspired by the original MUD. These included Gods by Ben Laurie, a MUD1
clone that included online creation in its endgame, and which became a commercial MUD in 1988; and MirrorWorld,
a tolkienesque MUD started by Pip Cordrey who gathered some people on a BBS he ran to create a MUD1 clone that would
run on a home computer.

Neil Newell, an avid MUD1 player, started programming his own MUD called SHADES during Christmas 1985, because MUD1
was closed down during the holidays. Starting out as a hobby, SHADES became accessible in the UK as a commercial MUD
via British Telecom's Prestel and Micronet networks. A scandal on SHADES led to the closure of Micronet, as
described in Indra Sinha's net-memoir, The Cybergypsies.

At the same time, Compunet started a project named Multi-User Galaxy Game as a Science Fiction alternative to MUD1, a
copy of which they were running on their system at the time. When one of the two programmers left CompuNet, the
remaining programmer, Alan Lenton, decided to rewrite the game from scratch and named it Federation II (at the time no
Federation I existed). The MUD was officially launched in 1989. Federation II was later picked up by AOL, where it
became known simply as "Federation: Adult Space Fantasy". Federation later left AOL to run on its own after AOL began
offering unlimited service.


==  Main object relationships

[PlayerData]
   |
[Player: (Mob) (Connection)]  /---[Equipment]
   |                         /
 [Mob: (Room) (Race) (Flags)]-----[Inventory]-----[Room (Flags)]-----[Exit]-----[Door]
   |         |          |               |*
 [Race]   [Fight]     [Prop]----------[Item (Flags)]
             |           |
          [FightAction]  [Basic Thing]
           |         |
  [BasicAttack]  [BasicSpell]
                     |
                 [Spell Effect]

  [World]

  [Commands]
       /|\
  [Enter][North][South][West][East][Up][Down][Kill]

  == How to obtain the rest of this eBook

  Firstly I have to write it. But I want to gauge interest first. Pledge 99p to me at Ivan.Stuart@gmail.com
  When I have at least 10 pledges I will go ahead with the rest of this eBook.

  ==  Client server communication

The server which listens for telnet socket connections runs in its own thread. It uses a Selector to wait and block on
a channel until input output is available then the read selector selects that socket. From the read selector we obtain
selection keys from which a ServerSocketChannel can be obtained once the key is acceptable. From the ServerSocketChannel
we accept a SocketChannel which we set to be non-blocking and read only. We also register a write selector with the
channel. This channel is then added to the ConnectionManager which maintains a map of these to connections.

Then if the key is readable we try to read into a buffer. We read from the socket channel until there are no more bytes
to read. This input is then passed to the ConnectionManager which passes on the processing to the connection that action
via a read method. The data is passed as a string which the carriage return filtered away.

If there is a invalid socket or any type of Exception then the socket connection will be closed by the ConnectionManager
. It does this by canceling the key and closing the channel. If the socket channel is still connected it will call
finish on it. There is no getline() method to read in a line of input. In order to get a line of input you have to wait
for it to be pushed to the process method. Hence the state for playing has to be changed to capture each line of input
with different outcomes depending on the input and how far along in the process the user is. Example of how this is done
is in both the Login code and the Password changing classes.

== MudIO the persistence layer

Player files are stored using the default serialisation mechanism in Java. The byte streams are also compressed to keep
the sizes smaller. This is done by using a GZIPInputStream. MudIO is the class with the methods to both save and load
objects using this strategy. Transient attributes of the players domain classes are not stored.

The ban list and admin list are both stored as an ArrayList of String using GSON this allows for manual editing of the
save files which is a nice feature should you want to disable the addAdmin command.

The main properties file mudserver.properties file contains the location of the save players ban list and world state
files. The world state will be discussed in more details in a later chapter of this eBook. However in short a simple
file handle is used to read the data in line by line. There is a special tag for comments '#' and for including new
files the include: tag is used. This allows for the files to be split out by naming convention that makes it easier to
location the data.

== SomeMoney

SomeMoney is an interface which allows you to hide entirely whether you are dealing with one sum of money or a batch
of different currencies. Having change available to make purchases should be hidden from the code which does the buying
and selling. There are four supported currency types copper, silver, gold and platinum and they are exchanged in a ratio
of 1:10 in that order. Hence 100 copper is 1 gold and vice versa. Why would you want to switch coins into higher
denominations, the answer to that is the weight of the coins it is less weight to carry 10 plat then 10000 copper.
At the bank coins can be converted into there highest denominations.

== Fight Actions

These a real time based sequences of steps. They have state such that they start at begin() and then transition to
happen(), changed(), done(), finished(). These methods are called after a duration in milliseconds has elapsed. There
is a thread in WorldTime which is checking every 100 milliseconds the status of all fight actions and if any of them are
ready to go to the next status. Fight actions also track who the source and target is for the fighting. BasicAttack
and BasicSpell inherit from FightAction.

== Spells and Buffs

BasicSpell is the main fight action for spells which are Cast. However there effect which is by default is damage can be
modified to various other behaviors. A spell has a spell effect which may resolve immediately or could result in a buff
being applied to the character. You can check buffs which the Affects command and see how long there is left on a given
buff. The buffs themselves extend Affect. The spell factory provides a mapping between which spells have what spell
effects. This may change in the future to use refection directly to avoid adding to the mapping, but its alright for now
.

==  Mob Behaviour

This uses reflection to match the name of the behaviour in the mob text file to the behaviours in the behaviour package.
They extend BaseBehaviour and come with two free parameters to configure. Typically the first is the chance of the
behaviour happening per game tick of 15 seconds. The second parameter can be used in lots of different ways.
To pass more params into behaviours is a little tricky and the code for this pollutes the mob object. See Patrol for how
a path was added.

== World building

Everything that is clever is done via the StateReader which uses the tags in the state files to drive object creation.
The one exception to the rule is room which can be revisited by id and further edited which allows them to be created by
the roomBuilder code and further modified. The state reader uses refection to create new objects of the type class as
specified in the state files. New objects are created when the id: tag is used and every other tag is a setter for the
class of object it is. It will try first to all a boolean method and then String and then int which minimises the amount
of boiler plate code required in the state files. Its a bit like simple Spring injection without the xml and all the
config options. But it benefits from being vastly simpler. It does couple the state files to the code but that is
intentional and its better than having all the data in class files.

By convention the root index file is a zone text file which then references rooms and mob files. Items can also be added
. These can be either added in the zone or mob files depending on how you want the items to load.
When you build a room is comes with exits to configure and these need to be done in both directions from the target room
then back in the opposite direction to the source room. This is done automatically by the room builder. In the future
there will also be a mob and item builder to generate random mobs and items. This is to help deal with the gulf of
effort required in area building. Sometimes you just want to be able to set a population density and have a spread of
mobs without having to specify each and every detail.

== Conclusion

There is a mountain of work to write a well written MUD in the first place. Then configuring all the state for the mobs,
 room and items this is why sites recruit builds and get 10-50 people to build areas. Each 50 room area takes 4-8 hours
 of work to hand crank. I hope to cut this down with clever room builder and mob building code which has yet to be
 added.

 How long until we have a fully working and hosted MUD. I would say we are about 5 months away from having the finished
 article. Finding somewhere cheep and easy to host is going to be one challenge. Then security needs to be managed to
 ensure that admin accounts are not hacked into. Logins should display last login and history the last history of
 commands entered. To make it very easy to spot if an account has been compromised.


